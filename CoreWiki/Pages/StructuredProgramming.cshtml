@page
@model StructuredProgrammingModel
@{
    ViewData["Title"] = "Structured Programming";
}

<h1>Structured Programming</h1>
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
<hr />

<h2>Structured Programming</h2>
<p>From Wikipedia, the free encyclopedia</p>

<p>
    Structured programming is a programming paradigm aimed at improving the clarity,
    quality, and development time of a computer program by making extensive use of the
    structured control flow constructs of selection (if/then/else) and repetition (while and for),
    block structures, and subroutines in contrast to using simple tests and jumps such as the go to
    statement, which can lead to "spaghetti code" that is potentially difficult to follow and maintain.
</p>
<p>
    It emerged in the late 1950s with the appearance of the ALGOL 58 and ALGOL 60 programming languages,
    with the latter including support for block structures. Contributing factors to its popularity and
    widespread acceptance, at first in academia and later among practitioners, include the discovery of
    what is now known as the structured program theorem in 1966,[2] and the publication of the influential
    "Go To Statement Considered Harmful" open letter in 1968 by Dutch computer scientist Edsger W. Dijkstra,
    who coined the term "structured programming".
</p>
<p>
    Structured programming is most frequently used with deviations that allow for clearer programs in some
    particular cases, such as when exception handling has to be performed.
</p>
<hr />
<h3>Elements</h3>
<hr />
<h4>Control structures</h4>
<p>
    Following the all programs are seen as composed of control structures:
</p>
<ul>
    <li>
        "Sequence"; ordered statements or subroutines executed in sequence.
    </li>
    <li>
        "Selection"; one or a number of statements is executed depending on the state of the program. 
        This is usually expressed with keywords such as if..then..else..endif.
    </li>
    <li>
        "Recursion"; a statement is executed by repeatedly calling itself until termination conditions are met. 
        While similar in practice to iterative loops, recursive loops may be more computationally efficient, 
        and are implemented differently as a cascading stack.
    </li>
    <li>
        "Recursion"; a statement is executed by repeatedly calling itself until termination conditions are met. 
        While similar in practice to iterative loops, recursive loops may be more computationally efficient, 
        and are implemented differently as a cascading stack.
    </li>
</ul>

<hr />
<h4>Exception handling</h4>
<p>Exception handling has below points as per various programmers:</p>
<ol>
    <li>
        Peter Ritchie also notes that, in principle, even a single throw right before the return in a function 
        constitutes a violation of the single-exit principle, but argues that Dijkstra's rules were written in 
        a time before exception handling became a paradigm in programming languages, so he proposes to allow any 
        number of throw points in addition to a single return point.
    </li>
    <li>
        Peter Ritchie also notes that solutions which wrap exceptions for the sake of creating a single-exit 
        have higher nesting depth and thus are more difficult to comprehend, and even accuses those who propose to 
        apply such solutions to programming languages which support exceptions of engaging in cargo cult thinking.[14]
    </li>
    <li>
        David Watt also analyzes exception handling in the framework of sequencers (introduced in this article in the previous 
        section on early exits.) Watt notes that an abnormal situation (generally exemplified with arithmetic overflows or 
        input/output failures like file not found) is a kind of error that "is detected in some low-level program unit, 
        but [for which] a handler is more naturally located in a high-level program unit".
    </li>
</ol>

<hr />
<p><strong>Some common definations:</strong></p>
<dl>
    <dt>
        Structured Programming
    </dt>
    <dd>
        Structured programming is a logical programming method that is considered a precursor to object-oriented programming (OOP). 
        Structured programming facilitates program understanding and modification and has a top-down design approach, where a system 
        is divided into compositional subsystems.
    </dd>
    <dt>
        Subroutines
    </dt>
    <dd>
        Subroutines; callable units such as procedures, functions, methods, or subprograms are used to allow a sequence to be
        referred to by a single statement.
    </dd>
    <dt>
        Blocks
    </dt>
    <dd>
        Blocks are used to enable groups of statements to be treated as if they were one statement. 
        Block-structured languages have a syntax for enclosing structures in some formal way, such as an if-statement.
    </dd>
</dl>